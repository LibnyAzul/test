"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from datetime import timedelta
from pathlib import Path

from django.conf import settings

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-ot&gu5sr38j--m@yr=5r%c2s#k%0+b@dv%1m5t*e@-u7c&+u33'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# URL / IP of the HOST that needs access
ALLOWED_HOSTS = ['127.0.0.1']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'tracking',
    'user',
    'vehicle'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware'
]

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'app/templates'),
            os.path.join(BASE_DIR, 'vehicle/templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'testapp',
        'USER': 'techtest',
        'PASSWORD': 'g6T!h$Z9J#X1&F2o_D7y',
        'HOST': '127.0.0.1',
        'PORT': '5432'
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Mexico_City'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_URL = '/static/'
#STATICFILES_DIRS = [os.path.join(BASE_DIR, 'build/static/')]


# Esta configuración define algunos valores predeterminados que Django Rest Framework (DRF) utilizará en tu proyecto.
#  Aquí te explico qué significa cada entrada:
#       1. DEFAULT_PERMISSION_CLASSES: Aquí se establece la clase de permisos por defecto para tus vistas de DRF.
#           La clase 'AllowAny' significa que cualquier usuario, autenticado o no, tendrá permiso para acceder a
#           las vistas a menos que se especifique lo contrario en la vista individual.
#       2. DEFAULT_AUTHENTICATION_CLASSES: Esta es una lista de las clases de autenticación que DRF utilizará por defecto.
#           En este caso, se está utilizando JWT (JSON Web Tokens) para la autenticación, así como la autenticación de sesión y básica.
#               a. JWT es una forma de autenticación sin estado donde el servidor no guarda información del usuario.
#                   En cambio, la información del usuario se codifica y se envía al cliente como un token,
#                   que luego se utiliza para hacer solicitudes autenticadas al servidor.
#               b. La autenticación de sesión es una forma de autenticación basada en estado donde el estado del usuario se guarda en el servidor.
#               c. La autenticación básica es una forma simple de autenticación que transmite las credenciales de usuario
#                   (generalmente un nombre de usuario y una contraseña) en cada solicitud.
#       3. DEFAULT_PAGINATION_CLASS y PAGE_SIZE: Estas dos configuraciones se refieren a la paginación de los resultados de la API.
#           'PageNumberPagination' es una clase de paginación que divide los resultados en páginas.
#           PAGE_SIZE establece el número predeterminado de resultados que se mostrarán en cada página.
#           En este caso,se mostrarán 3 resultados por página.
#  Estas configuraciones nos permiten tener un control detallado sobre cómo DRF manejará la autenticación,
#  los permisos y la paginación de la aplicación.
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.AllowAny',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 3
}

CORS_ORIGIN_ALLOW_ALL = True

# Este es un valor octal que Django utilizará como los permisos predeterminados para cualquier archivo que se
#  cargue en la aplicación. El valor 0o640 significa que el propietario del archivo tiene permiso de lectura y
#  escritura, mientras que el grupo tiene permiso de lectura, y otros no tienen permisos. En otras palabras,
#  el propietario puede leer y escribir el archivo, pero no puede ejecutarlo como un programa. Los usuarios del mismo
#  grupo pueden leer el archivo, pero no pueden escribir en él ni ejecutarlo. Todos los demás usuarios no tienen
#  acceso al archivo. Este valor predeterminado puede ser anulado por la configuración del sistema.
FILE_UPLOAD_PERMISSIONS = 0o640

# Propiedad usada para indicarle a Django que usara nuestro modelo personalizado en lugar del predeterminado
#  para las autentificaciones. La cadena 'user.User' indica que el modelo de usuario personalizado se encuentra en la
#  aplicación user y se llama User. Cada vez que Django se refiere al modelo de usuario, utilizará este modelo
#  personalizado.
AUTH_USER_MODEL = 'user.User'
# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

# Estableceremos que, por defecto, Django utilizará un BigAutoField para las claves primarias en los modelos.
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Esta configuración se refiere a la biblioteca djangorestframework-simplejwt (Que es una extensión para Django
#  REST Framework) proporciona soporte para la autenticación con JSON Web Tokens (JWT). Los JWT son una forma común
#  de manejar la autenticación en las APIs REST.
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=5),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=5),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": False,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": settings.SECRET_KEY,
    "VERIFYING_KEY": "",
    "AUDIENCE": None,
    "ISSUER": None,
    "JSON_ENCODER": None,
    "JWK_URL": None,
    "LEEWAY": 0,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "JTI_CLAIM": "jti",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",
    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(days=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=5),
    "TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainPairSerializer",
    "TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSerializer",
    "TOKEN_VERIFY_SERIALIZER": "rest_framework_simplejwt.serializers.TokenVerifySerializer",
    "TOKEN_BLACKLIST_SERIALIZER": "rest_framework_simplejwt.serializers.TokenBlacklistSerializer",
    "SLIDING_TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainSlidingSerializer",
    "SLIDING_TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSlidingSerializer"
}
